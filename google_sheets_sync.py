import pandas as pd
import json
import re
import os
from datetime import datetime
import requests
import logging

logger = logging.getLogger(__name__)

class GoogleSheetsSync:
    def __init__(self):
        # URL –¥–ª—è –ø—Ä—è–º–æ–≥–æ CSV —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑ Google Sheets
        self.price_url = "https://docs.google.com/spreadsheets/d/19PRNpA6F_HMI6iHSCg2iJF52PnN203ckY1WnqY_t5fc/export?format=csv"
        self.stock_url = "https://docs.google.com/spreadsheets/d/1o0e3-E20mQsWToYVQpCHZgLcbizCafLRpoPdxr8Rqfw/export?format=csv"
        
    def sync_data(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets"""
        try:
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü
            logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–π—Å...")
            price_df = pd.read_csv(self.price_url)
            logger.info(f"–ö–æ–ª–æ–Ω–∫–∏ –≤ –ø—Ä–∞–π—Å–µ: {price_df.columns.tolist()}")
            
            logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏...")
            stock_df = pd.read_csv(self.stock_url)
            logger.info(f"–ö–æ–ª–æ–Ω–∫–∏ –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö: {stock_df.columns.tolist()}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            def find_column(df, possible_names):
                for col in df.columns:
                    col_lower = str(col).lower()
                    if any(name.lower() in col_lower for name in possible_names):
                        return col
                return None
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫–∏ –≤ –ø—Ä–∞–π—Å–µ
            article_col_price = find_column(price_df, ['–∞—Ä—Ç–∏–∫—É–ª', 'article', '–∫–æ–¥', 'articul', 'sku'])
            name_col = find_column(price_df, ['—Ç–æ–≤–∞—Ä', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–º–æ–¥–µ–ª—å', 'name', 'product', '–Ω–∞–∑–≤–∞–Ω–∏–µ'])
            price_col = find_column(price_df, ['—Ä–æ–∑–Ω–∏—á–Ω–∞—è', '—Ü–µ–Ω–∞', 'price', 'retail', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ä—É–±'])
            
            logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ –≤ –ø—Ä–∞–π—Å–µ: –ê—Ä—Ç–∏–∫—É–ª='{article_col_price}', –ù–∞–∑–≤–∞–Ω–∏–µ='{name_col}', –¶–µ–Ω–∞='{price_col}'")
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫–∏ –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö
            article_col_stock = find_column(stock_df, ['–∞—Ä—Ç–∏–∫—É–ª', 'article', '–∫–æ–¥', 'articul', 'sku'])
            stock_col = find_column(stock_df, ['–≤ –Ω–∞–ª–∏—á–∏–∏', '–æ—Å—Ç–∞—Ç–æ–∫', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'quantity', 'stock', '–Ω–∞–ª–∏—á–∏–µ', '–∫–æ–ª-–≤–æ'])
            
            logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö: –ê—Ä—Ç–∏–∫—É–ª='{article_col_stock}', –ù–∞–ª–∏—á–∏–µ='{stock_col}'")
            
            if not all([article_col_price, name_col, price_col, article_col_stock, stock_col]):
                raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö")
            
            # –°–æ–∑–¥–∞–µ–º —á–∏—Å—Ç—ã–µ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—ã
            price_clean = price_df[[article_col_price, name_col, price_col]].copy()
            price_clean.columns = ['–ê—Ä—Ç–∏–∫—É–ª', '–ú–æ–¥–µ–ª—å', '–¶–µ–Ω–∞']
            
            stock_clean = stock_df[[article_col_stock, stock_col]].copy()
            stock_clean.columns = ['–ê—Ä—Ç–∏–∫—É–ª', '–í_–Ω–∞–ª–∏—á–∏–∏']
            
            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            price_clean = price_clean.dropna(subset=['–ê—Ä—Ç–∏–∫—É–ª'])
            price_clean['–ê—Ä—Ç–∏–∫—É–ª'] = price_clean['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip()
            
            stock_clean = stock_clean.dropna(subset=['–ê—Ä—Ç–∏–∫—É–ª'])
            stock_clean['–ê—Ä—Ç–∏–∫—É–ª'] = stock_clean['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
            def parse_price(price):
                try:
                    if pd.isna(price):
                        return 0.0
                    price_str = str(price).replace(' ', '').replace(',', '.')
                    price_str = re.sub(r'[^\d\.]', '', price_str)
                    return float(price_str)
                except:
                    return 0.0
            
            price_clean['–¶–µ–Ω–∞'] = price_clean['–¶–µ–Ω–∞'].apply(parse_price)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            def parse_quantity(qty):
                try:
                    if pd.isna(qty):
                        return 0
                    qty_str = str(qty).replace(' ', '').replace(',', '.')
                    qty_val = float(qty_str)
                    return max(0, int(qty_val))
                except:
                    return 0
            
            stock_clean['–í_–Ω–∞–ª–∏—á–∏–∏'] = stock_clean['–í_–Ω–∞–ª–∏—á–∏–∏'].apply(parse_quantity)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            merged_df = pd.merge(price_clean, stock_clean, on='–ê—Ä—Ç–∏–∫—É–ª', how='left')
            merged_df['–í_–Ω–∞–ª–∏—á–∏–∏'] = merged_df['–í_–Ω–∞–ª–∏—á–∏–∏'].fillna(0).astype(int)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            merged_df = self._add_product_fields(merged_df)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            result = merged_df.to_dict('records')
            
            logger.info(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(result)} —Ç–æ–≤–∞—Ä–æ–≤")
            logger.info(f"üìä –í –Ω–∞–ª–∏—á–∏–∏: {sum(1 for x in result if x['–í_–Ω–∞–ª–∏—á–∏–∏'] > 0)} —Ç–æ–≤–∞—Ä–æ–≤")
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def _add_product_fields(self, df):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫ –¥–∞–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–≤"""
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø–æ –º–æ–¥–µ–ª–∏
        def get_image_for_model(model_name):
            model = str(model_name).upper()
            
            if 'METEOR T2' in model:
                return '/static/meteor-t2.jpg'
            elif 'METEOR C30' in model:
                return '/static/meteor-c30.jpg'
            elif 'METEOR B30' in model:
                return '/static/meteor-b30.jpg'
            elif 'METEOR B20' in model:
                return '/static/meteor-b20.jpg'
            elif 'METEOR C11' in model:
                return '/static/meteor-c11.jpg'
            elif 'METEOR Q3' in model:
                return '/static/meteor-q3.jpg'
            elif 'METEOR M30' in model:
                return '/static/meteor-m30.jpg'
            elif 'METEOR M6' in model:
                return '/static/meteor-m6.jpg'
            elif 'LAGGARTT' in model or '–ì–ê–ó 6000' in model:
                return '/static/laggartt.jpg'
            elif 'DEVOTION' in model:
                return '/static/devotion.jpg'
            elif 'MK' in model:
                return '/static/mk.jpg'
            else:
                return '/static/meteor-b30.jpg'  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
        def extract_info(model):
            model_str = str(model).upper()
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏
            power_patterns = [
                (r'(T2|M6|M30|B20|B30|C30|C11|Q3)[^\d]*(\d+)', 2),
                (r'(\d+)\s*(C|H|–°|–•|–∫–í—Ç|KW)', 1),
                (r'–ì–ê–ó\s*6000\s*(\d+)', 1),
                (r'MK\s*(\d+)', 1),
                (r'LL1GBQ(\d+)', 1),
                (r'LN1GBQ(\d+)', 1),
            ]
            
            power = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            for pattern, group in power_patterns:
                match = re.search(pattern, model_str)
                if match:
                    power = match.group(group)
                    break
            
            if power == "–ù–µ —É–∫–∞–∑–∞–Ω–∞":
                numbers = re.findall(r'\b(\d{2,3})\b', model_str)
                if numbers:
                    power = numbers[0]
            
            # –ö–æ–Ω—Ç—É—Ä—ã
            if any(x in model_str for x in [' C', '–° ', 'C)', '-C', ' C ', ' –° ']):
                contours = "–î–≤—É—Ö–∫–æ–Ω—Ç—É—Ä–Ω—ã–π"
            elif any(x in model_str for x in [' H', '–ù ', 'H)', '-H', ' H ', ' –ù ']):
                contours = "–û–¥–Ω–æ–∫–æ–Ω—Ç—É—Ä–Ω—ã–π" 
            else:
                contours = "–î–≤—É—Ö–∫–æ–Ω—Ç—É—Ä–Ω—ã–π" if '–ù–ê–°–¢–ï–ù–ù–´–ô' in model_str else "–û–¥–Ω–æ–∫–æ–Ω—Ç—É—Ä–Ω—ã–π"
            
            # Wi-Fi
            wifi = "–î–∞" if any(x in model_str for x in ['WI-FI', 'WIFI', '–í–ê–ô-–§–ê–ô', 'WI FI']) else "–ù–µ—Ç"
            
            return power, contours, wifi
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        df[['–ú–æ—â–Ω–æ—Å—Ç—å', '–ö–æ–Ω—Ç—É—Ä—ã', 'WiFi']] = df['–ú–æ–¥–µ–ª—å'].apply(
            lambda x: pd.Series(extract_info(x))
        )
        
        df['–§–æ—Ç–æ'] = df['–ú–æ–¥–µ–ª—å'].apply(get_image_for_model)
        df['–°—Ç–∞—Ç—É—Å'] = df['–í_–Ω–∞–ª–∏—á–∏–∏'].apply(lambda x: '–í –Ω–∞–ª–∏—á–∏–∏' if x > 0 else '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏')
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—Ä–æ–≤–Ω–∏ –º–æ—â–Ω–æ—Å—Ç–∏
        def get_product_category(model):
            model_str = str(model).lower()
            if 'meteor' in model_str:
                return 'meteor'
            elif 'laggartt' in model_str or '–≥–∞–∑' in model_str:
                return 'laggartt'
            elif 'devotion' in model_str:
                return 'devotion'
            elif 'mk' in model_str:
                return 'mk'
            else:
                return 'other'
        
        def get_power_level(power):
            try:
                power_val = int(power)
                if power_val <= 20:
                    return 'low'
                elif power_val <= 30:
                    return 'medium'
                else:
                    return 'high'
            except:
                return 'unknown'
        
        df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] = df['–ú–æ–¥–µ–ª—å'].apply(get_product_category)
        df['–£—Ä–æ–≤–µ–Ω—å_–º–æ—â–Ω–æ—Å—Ç–∏'] = df['–ú–æ—â–Ω–æ—Å—Ç—å'].apply(get_power_level)
        
        return df